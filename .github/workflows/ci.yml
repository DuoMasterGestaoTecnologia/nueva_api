name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests with coverage
      run: |
        dotnet test \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --settings ./OmniSuite.Tests/coverlet.runsettings \
          --logger trx \
          --logger "console;verbosity=detailed"
          
    - name: Install ReportGenerator tool
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.opencover.xml" \
          -targetdir:"./coverage/report" \
          -reporttypes:"Html;HtmlSummary" \
          -assemblyfilters:"-*.Tests*" \
          -classfilters:"-*.Program;-*.Startup;-*.Migrations.*"
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/**/coverage.opencover.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/report/
        retention-days: 30

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Publish API
      run: |
        dotnet publish ./OmniSuite.API/OmniSuite.API.csproj \
          --configuration Release \
          --output ./publish \
          --no-restore
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./publish/
        retention-days: 7

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./publish/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Create deployment package
      run: |
        mkdir -p ./deploy
        cp -r ./publish/* ./deploy/
        cp ./docker/docker-compose.simple.yml ./deploy/docker-compose.yml
        cp ./docker/docker.env ./deploy/
        cp ./deploy/appsettings.Production.json ./deploy/
        cp ./deploy/deploy-scripts/deploy.sh ./deploy/
        chmod +x ./deploy/deploy.sh
        
        # Debug: List files in deploy directory
        echo "Files in deploy directory:"
        ls -la ./deploy/
        
        # Create tar.gz
        tar -czf ./deploy.tar.gz -C ./deploy .
        
        # Debug: Check if tar.gz was created
        echo "Deploy package created:"
        ls -la ./deploy.tar.gz
        echo "Package size: $(du -h ./deploy.tar.gz)"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          # Create deployment directory with proper permissions
          sudo mkdir -p /opt/omnisuite
          sudo chown -R $USER:$USER /opt/omnisuite
          sudo chmod -R 755 /opt/omnisuite
          cd /opt/omnisuite
          
          # Stop existing services
          sudo docker-compose down || true
          
          # Backup current deployment
          if [ -d "current" ]; then
            sudo mv current backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Create new deployment directory with proper permissions
          mkdir -p current
          chmod 755 current
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        source: "./deploy.tar.gz"
        target: "/opt/omnisuite/current/"
        strip_components: 0
        
    - name: Extract and start services
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT || 22 }}
        script: |
          cd /opt/omnisuite/current
          
          # Debug: List files in directory
          echo "Files in /opt/omnisuite/current:"
          ls -la
          
          # Set proper permissions before extraction
          sudo chown -R $USER:$USER .
          sudo chmod 755 .
          
          # Check if deploy.tar.gz exists
          if [ -f "deploy.tar.gz" ]; then
            echo "deploy.tar.gz found, extracting..."
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            echo "Extraction completed"
          else
            echo "ERROR: deploy.tar.gz not found!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
          
          # Set proper permissions for all files
          chown -R $USER:$USER .
          chmod +x deploy.sh
          chmod -R 755 .
          
          # List extracted files
          echo "Extracted files:"
          ls -la
          
          # Start services directly (files are already extracted)
          echo "Starting services..."
          sudo docker-compose up -d --build
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Health check
          echo "Checking service health..."
          if curl -f http://localhost:5000/health 2>/dev/null || curl -f http://localhost:5000/swagger 2>/dev/null || curl -f http://localhost:5000/ 2>/dev/null; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Health check failed!"
            echo "Checking Docker containers:"
            sudo docker ps -a
            echo "Checking Docker logs:"
            sudo docker-compose logs
            echo "Checking if API is running on port 5000:"
            netstat -tlnp | grep 5000 || echo "Port 5000 not listening"
            exit 1
          fi